#include <windows.h>
#include "zlib.h"
#include <stdio.h>
#pragma comment(lib,"zlibwapi.lib")

int uncompressData(const char* loadFileName, char* lpBase, DWORD dwFileSize)
{
	char* de_text = NULL;
	uLong tlen = dwFileSize * 10;
	if ((de_text = (char*)malloc(sizeof(char) * dwFileSize * 10)) == NULL)
	{
		printf("no enough memory: ");
		printf("%s\n", loadFileName);
		return -1;
	}

	int number = uncompress((Bytef*)de_text, &tlen, (Bytef*)lpBase, dwFileSize);
	/* 解压缩 */
	if (number)
	{
		//Z_OK
		//Z_STREAM_END    1
		//Z_NEED_DICT     2
		//Z_ERRNO        (-1)
		//Z_STREAM_ERROR (-2)
		//Z_DATA_ERROR   (-3)
		//Z_MEM_ERROR    (-4)
		//Z_BUF_ERROR    (-5)
		//Z_VERSION_ERROR (-6)
		printf("uncompress failed: ");
		printf("%s\n", loadFileName);
		return -1;
	}

	//保存到文件
	FILE* p2file;
	char outFile[MAX_PATH];
	memset(outFile, 0, sizeof(outFile));
	//拼接字符串输出
	char str1[] = "_uncompress";

	strcat_s(outFile, strlen(loadFileName) + 1, loadFileName);
	int len2 = strlen(outFile) + strlen(str1) + 1;
	strcat_s(outFile, len2, str1);

	p2file = fopen(outFile, "wb");
	if (p2file == NULL)
	{
		printf("create file failed: ");
		printf("%s\n", loadFileName);
		if (de_text != NULL)
		{
			free(de_text);
			de_text = NULL;
		}
		return -1;
	}

	DWORD offsetA = *(DWORD*)(&de_text[0x100]);
	DWORD offset = 0x128 + offsetA;
	int a = fwrite(de_text + offset, tlen, 1, p2file);
	fclose(p2file);
	/* 打印结果，并释放内存 */
	printf("succeed: ");
	printf("%s", loadFileName);
	printf(">>>>");
	printf("%s\n", outFile);
	if (de_text != NULL)
	{
		free(de_text);
		de_text = NULL;
	}
	return 0;
}

bool read_file_into_memory(char* data)
{
	FILE* hFile = NULL;
	DWORD dwFileSize = 0;

	hFile = fopen(data, "rb");
	if (!hFile)
	{
		printf("File open fail\n");
		return false;
	}
	fseek(hFile, 0, SEEK_END);
	dwFileSize = ftell(hFile);
	printf(" [*] File Size: 0x%04x\n", dwFileSize);
	fseek(hFile, 0, SEEK_SET);
	char* lpBase = (char*)VirtualAlloc(NULL, dwFileSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	printf(" [*] Allocated Address: 0x%08x\n", lpBase);
	fread(lpBase, dwFileSize, 1, hFile);
	fclose(hFile);
	srand(dwFileSize);
	int v3 = 0;
	for (int i = 0; i < dwFileSize; i++)
	{
		v3 = rand() % 256;
		lpBase[i] = lpBase[i] ^ v3;
	}
	uncompressData("spreadoc", lpBase, dwFileSize);
}

int main(int argc, char* argv[])
{
	read_file_into_memory(argv[1]);
	return 0;
}